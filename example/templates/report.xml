<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="637" skipped="10" tests="1425" time="27.518" timestamp="2025-05-23T09:54:13.207517+02:00" hostname="fedora"><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_custom_error_format" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_custom_error_format_applies_to_schema_errors" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_instance_does_not_exist" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_instance_does_not_exist_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_instance_is_invalid_JSON" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_instance_is_invalid_JSON_on_stdin" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_instance_is_invalid_JSON_on_stdin_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_instance_is_invalid_JSON_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_explicit_base_uri" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_instance" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_instance_continues_with_the_rest" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_instance_explicit_plain_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_instance_multiple_errors" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_instance_multiple_errors_pretty_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_instance_pretty_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_schema" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_schema_multiple_errors" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_schema_multiple_errors_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_schema_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_schema_with_invalid_instance" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_invalid_schema_with_invalid_instance_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_it_validates_using_draft4_when_specified" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_it_validates_using_draft7_when_specified" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_it_validates_using_the_latest_validator_when_unspecified" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_multiple_invalid_instances" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_multiple_invalid_instances_pretty_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_neither_instance_nor_schema_exist" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_neither_instance_nor_schema_exist_pretty_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_nonexistent_file_with_explicit_base_uri" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_schema_and_instance_are_both_invalid_JSON" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_schema_and_instance_are_both_invalid_JSON_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_schema_does_not_exist" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_schema_does_not_exist_pretty_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_schema_is_invalid_JSON" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_schema_is_invalid_JSON_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_successful_validation" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_successful_validation_of_just_the_schema" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_successful_validation_of_just_the_schema_pretty_output" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_successful_validation_of_stdin" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_successful_validation_of_stdin_pretty_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_successful_validation_pretty_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_successful_validation_via_explicit_base_uri" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLI" name="test_unsuccessful_validation_via_explicit_base_uri" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestParser" name="test_find_validator_by_fully_qualified_object_name" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestParser" name="test_find_validator_in_jsonschema" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestParser" name="test_unknown_output" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestParser" name="test_useless_error_format" time="0.000" /><testcase classname="jsonschema.tests.test_cli.TestCLIIntegration" name="test_license" time="0.001" /><testcase classname="jsonschema.tests.test_cli.TestCLIIntegration" name="test_no_arguments_shows_usage_notes" time="0.305" /><testcase classname="jsonschema.tests.test_cli.TestCLIIntegration" name="test_version" time="0.142" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_ErrorTree_setitem" time="0.001" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_FormatChecker_cls_checks" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_RefResolutionError" time="0.001" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_RefResolver" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_RefResolver_in_scope" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_Validator_is_valid_two_arguments" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_Validator_iter_errors_two_arguments" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_Validator_resolver" time="0.001" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_Validator_subclassing" time="0.001" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_WrappedReferencingError_hashability" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_automatic_remote_retrieval" time="0.001" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_catching_Unresolvable_directly" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_catching_Unresolvable_via_RefResolutionError" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_cli" time="0.144" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_draftN_format_checker" time="0.001" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_import_ErrorTree" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_import_FormatError" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_import_Validator" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_import_cli" time="0.002" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_validators_ErrorTree" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_validators_meta_schemas" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_validators_validators" time="0.000" /><testcase classname="jsonschema.tests.test_deprecations.TestDeprecations" name="test_version" time="0.001" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_anyOf_traversal_for_non_type_matching_sibling_errors" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_anyOf_traversal_for_single_equally_relevant_error" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_anyOf_traversal_for_single_sibling_errors" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_boolean_schemas" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_if_the_most_relevant_error_is_allOf_it_is_traversed" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_if_the_most_relevant_error_is_anyOf_it_is_traversed" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_if_the_most_relevant_error_is_oneOf_it_is_traversed" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_it_prioritizes_matching_types" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_it_prioritizes_matching_union_types" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_nested_context_for_oneOf" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_no_anyOf_traversal_for_equally_relevant_errors" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_no_errors" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_no_oneOf_traversal_for_equally_relevant_errors" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_oneOf_and_anyOf_are_weak_matches" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_oneOf_traversal_for_non_type_matching_sibling_errors" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_oneOf_traversal_for_single_equally_relevant_error" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_oneOf_traversal_for_single_sibling_errors" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_one_error" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestBestMatch" name="test_shallower_errors_are_better_matches" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestByRelevance" name="test_global_errors_are_even_better_matches" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestByRelevance" name="test_short_paths_are_better_matches" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestByRelevance" name="test_strong_keywords_are_higher_priority" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestByRelevance" name="test_weak_keywords_are_lower_priority" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_children_have_their_errors_dicts_built" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_if_its_in_the_tree_anyhow_it_does_not_raise_an_error" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_it_contains_an_item_if_the_item_had_an_error" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_it_creates_a_child_tree_for_each_nested_path" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_it_does_not_contain_an_item_if_the_item_had_no_error" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_it_does_not_contain_subtrees_that_are_not_in_the_instance" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_it_knows_how_many_total_errors_it_contains" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_iter" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_keywords_that_failed_appear_in_errors_dict" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_multiple_errors_with_instance" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_repr_empty" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_repr_multiple" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorTree" name="test_repr_single" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_does_not_reorder_dicts" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_empty_paths" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_it_calls_super_and_sets_args" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_multiple_item_paths" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_one_item_paths" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_repr" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_str_works_with_instances_having_overriden_eq_operator" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_unset_error" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestErrorInitReprStr" name="test_uses_pprint" time="0.000" /><testcase classname="jsonschema.tests.test_exceptions.TestHashable" name="test_hashable" time="0.000" /><testcase classname="jsonschema.tests.test_format.TestFormatChecker" name="test_format_checkers_come_with_defaults" time="0.000" /><testcase classname="jsonschema.tests.test_format.TestFormatChecker" name="test_format_error_causes_become_validation_error_causes" time="0.000" /><testcase classname="jsonschema.tests.test_format.TestFormatChecker" name="test_it_can_register_checkers" time="0.000" /><testcase classname="jsonschema.tests.test_format.TestFormatChecker" name="test_it_can_register_cls_checkers" time="0.000" /><testcase classname="jsonschema.tests.test_format.TestFormatChecker" name="test_it_can_validate_no_formats" time="0.000" /><testcase classname="jsonschema.tests.test_format.TestFormatChecker" name="test_it_catches_registered_errors" time="0.000" /><testcase classname="jsonschema.tests.test_format.TestFormatChecker" name="test_it_raises_a_key_error_for_unknown_formats" time="0.000" /><testcase classname="jsonschema.tests.test_format.TestFormatChecker" name="test_repr" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_are_allowed_by_default_only_the_first_item_is_validated" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_are_allowed_by_default_only_the_first_item_is_validated&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_as_false_without_items_ignores_non_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_as_false_without_items_ignores_non_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_as_false_without_items_items_defaults_to_empty_schema_so_everything_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_as_false_without_items_items_defaults_to_empty_schema_so_everything_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_as_schema_additional_items_do_not_match_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_as_schema_additional_items_do_not_match_schema&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_as_schema_additional_items_match_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_as_schema_additional_items_match_schema&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_does_not_look_in_applicators_items_defined_in_extends_are_not_examined" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_does_not_look_in_applicators_items_defined_in_extends_are_not_examined&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_with_heterogeneous_array_heterogeneous_invalid_instance" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_with_heterogeneous_array_heterogeneous_invalid_instance&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_with_heterogeneous_array_valid_instance" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_with_heterogeneous_array_valid_instance&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_additionalItems_with_null_instance_elements_allows_null_elements" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_additionalItems_with_null_instance_elements_allows_null_elements&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_additional_items_are_not_permitted" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_additional_items_are_not_permitted&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_empty_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_empty_array&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_equal_number_of_items_present" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_equal_number_of_items_present&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_fewer_number_of_items_present_1_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_fewer_number_of_items_present_1_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_fewer_number_of_items_present_2_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_fewer_number_of_items_present_2_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalItems_when_items_is_schema_additionalItems_does_nothing_all_items_match_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalItems_when_items_is_schema_additionalItems_does_nothing_all_items_match_schema&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_are_allowed_by_default_additional_properties_are_allowed" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_are_allowed_by_default_additional_properties_are_allowed&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_an_additional_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_an_additional_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_no_additional_properties_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_no_additional_properties_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_patternProperties_are_not_additional_properties" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_patternProperties_are_not_additional_properties&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_can_exist_by_itself_an_additional_invalid_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_can_exist_by_itself_an_additional_invalid_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_can_exist_by_itself_an_additional_valid_property_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_can_exist_by_itself_an_additional_valid_property_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_does_not_look_in_applicators_properties_defined_in_extends_are_not_examined" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_does_not_look_in_applicators_properties_defined_in_extends_are_not_examined&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_with_null_valued_instance_properties_allows_null_values" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_with_null_valued_instance_properties_allows_null_values&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_with_schema_an_additional_invalid_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_with_schema_an_additional_invalid_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_with_schema_an_additional_valid_property_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_with_schema_an_additional_valid_property_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_additionalProperties_with_schema_no_additional_properties_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_additionalProperties_with_schema_no_additional_properties_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_non_ASCII_pattern_with_additionalProperties_matching_the_pattern_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_non_ASCII_pattern_with_additionalProperties_matching_the_pattern_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_additionalProperties_non_ASCII_pattern_with_additionalProperties_not_matching_the_pattern_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_additionalProperties_non_ASCII_pattern_with_additionalProperties_not_matching_the_pattern_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_float_comparison_with_high_precision_comparison_works_for_high_numbers" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_float_comparison_with_high_precision_on_negative_numbers_comparison_works_for_very_negative_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_integer_a_bignum_is_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_integer_a_negative_bignum_is_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_maximum_integer_comparison_comparison_works_for_high_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_minimum_integer_comparison_comparison_works_for_very_negative_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_number_a_bignum_is_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_number_a_negative_bignum_is_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_bignum_string_a_bignum_is_not_a_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_color_validation_of_CSS_colors_a_CSS_color_name_containing_invalid_characters" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_color_validation_of_CSS_colors_a_valid_CSS_color_name" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_color_validation_of_CSS_colors_a_valid_six_digit_CSS_color_code" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_color_validation_of_CSS_colors_a_valid_three_digit_CSS_color_code" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_color_validation_of_CSS_colors_an_invalid_CSS_color_code" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_color_validation_of_CSS_colors_an_invalid_CSS_color_name" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_time_validation_of_date_time_strings_a_valid_date_time_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_time_validation_of_date_time_strings_an_invalid_date_time_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_time_validation_of_date_time_strings_case_insensitive_T_and_Z" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_time_validation_of_date_time_strings_invalid_non_padded_day_dates" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_time_validation_of_date_time_strings_invalid_non_padded_month_dates" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_time_validation_of_date_time_strings_only_RFC3339_not_all_of_ISO_8601_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_29_days_in_February_normal_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_30_days_in_February_leap_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_31_days_in_April" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_31_days_in_June" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_31_days_in_November" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_31_days_in_September" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_32_days_in_August" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_32_days_in_December" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_32_days_in_January" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_32_days_in_July" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_32_days_in_March" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_32_days_in_May" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_32_days_in_October" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_invalid_date_string_with_invalid_month" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_28_days_in_February_normal_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_29_days_in_February_leap_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_30_days_in_April" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_30_days_in_June" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_30_days_in_November" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_30_days_in_September" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_31_days_in_August" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_31_days_in_December" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_31_days_in_January" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_31_days_in_July" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_31_days_in_March" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_31_days_in_May" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_a_valid_date_string_with_31_days_in_October" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_an_invalid_date_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_invalidates_non_padded_day_dates" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_invalidates_non_padded_month_dates" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_date_validation_of_date_strings_only_RFC3339_not_all_of_ISO_8601_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_default_invalid_string_value_for_default_still_valid_when_the_invalid_default_is_used" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_default_invalid_string_value_for_default_still_valid_when_the_invalid_default_is_used&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_default_invalid_string_value_for_default_valid_when_property_is_specified" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_default_invalid_string_value_for_default_valid_when_property_is_specified&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_default_invalid_type_for_default_still_valid_when_the_invalid_default_is_used" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_default_invalid_type_for_default_still_valid_when_the_invalid_default_is_used&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_default_invalid_type_for_default_valid_when_property_is_specified" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_default_invalid_type_for_default_valid_when_property_is_specified&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_an_explicit_property_value_is_checked_against_maximum_failing_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_an_explicit_property_value_is_checked_against_maximum_failing_&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_an_explicit_property_value_is_checked_against_maximum_passing_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_an_explicit_property_value_is_checked_against_maximum_passing_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_missing_properties_are_not_filled_in_with_the_default" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_missing_properties_are_not_filled_in_with_the_default&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_dependencies_ignores_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_dependencies_ignores_other_non_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_dependencies_ignores_strings" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_dependencies_missing_dependency" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_dependencies_neither" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_dependencies_nondependant" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_dependencies_with_dependency" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_missing_both_dependencies" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_missing_dependency" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_missing_other_dependency" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_neither" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_nondependants" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_subschema_no_dependency" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_dependencies_multiple_dependencies_subschema_no_dependency&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_subschema_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_dependencies_multiple_dependencies_subschema_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_subschema_wrong_type" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_dependencies_multiple_dependencies_subschema_wrong_type&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_subschema_wrong_type_both" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_dependencies_multiple_dependencies_subschema_wrong_type_both&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_subschema_wrong_type_other" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_dependencies_multiple_dependencies_subschema_wrong_type_other&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_dependencies_multiple_dependencies_with_dependencies" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_disallow_allowed" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_disallow_disallowed" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_multiple_disallow_mismatch" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_multiple_disallow_other_mismatch" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_multiple_disallow_subschema_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_disallow_multiple_disallow_subschema_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_multiple_disallow_subschema_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_disallow_multiple_disallow_subschema_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_multiple_disallow_subschema_other_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_disallow_multiple_disallow_subschema_other_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_multiple_disallow_subschema_other_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_disallow_multiple_disallow_subschema_other_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_disallow_multiple_disallow_valid" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_divisibleBy_by_int_ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_divisibleBy_by_int_int_by_int" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_divisibleBy_by_int_int_by_int_fail" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_divisibleBy_by_number_35_is_not_divisible_by_1_5" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_divisibleBy_by_number_4_5_is_divisible_by_1_5" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_divisibleBy_by_number_zero_is_divisible_by_anything_except_0_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_divisibleBy_by_small_number_0_00751_is_not_divisible_by_0_0001" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_divisibleBy_by_small_number_0_0075_is_divisible_by_0_0001" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ecmascript_regex_ECMA_262_regex_dialect_recognition_ECMA_262_has_no_support_for_lookbehind" time="0.000"><skipped type="pytest.skip" message="ECMA regex support will be added in #1142.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:236: ECMA regex support will be added in #1142.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ecmascript_regex_ECMA_262_regex_dialect_recognition__is_a_valid_regex" time="0.000"><skipped type="pytest.skip" message="ECMA regex support will be added in #1142.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:233: ECMA regex support will be added in #1142.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_a_valid_e_mail_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_an_invalid_e_mail_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_dot_after_local_part_is_not_valid" time="0.000"><skipped type="pytest.skip" message="Complex email validation is (intentionally) unsupported.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:236: Complex email validation is (intentionally) unsupported.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_dot_before_local_part_is_not_valid" time="0.000"><skipped type="pytest.skip" message="Complex email validation is (intentionally) unsupported.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:236: Complex email validation is (intentionally) unsupported.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_tilde_after_local_part_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_tilde_before_local_part_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_tilde_in_local_part_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_two_separated_dots_inside_local_part_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_email_validation_of_e_mail_addresses_two_subsequent_dots_inside_local_part_are_not_valid" time="0.000"><skipped type="pytest.skip" message="Complex email validation is (intentionally) unsupported.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:236: Complex email validation is (intentionally) unsupported.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_enums_in_properties_both_properties_are_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_enum_enums_in_properties_both_properties_are_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_enums_in_properties_missing_all_properties_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_enum_enums_in_properties_missing_all_properties_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_enums_in_properties_missing_optional_property_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_enum_enums_in_properties_missing_optional_property_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_enums_in_properties_missing_required_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_enum_enums_in_properties_missing_required_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_enums_in_properties_wrong_bar_value" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_enum_enums_in_properties_wrong_bar_value&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_enums_in_properties_wrong_foo_value" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_enum_enums_in_properties_wrong_foo_value&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_heterogeneous_enum_validation_objects_are_deep_compared" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_heterogeneous_enum_validation_one_of_the_enum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_heterogeneous_enum_validation_something_else_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_heterogeneous_enum_with_null_validation_null_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_heterogeneous_enum_with_null_validation_number_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_heterogeneous_enum_with_null_validation_something_else_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_nul_characters_in_strings_do_not_match_string_lacking_nul" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_nul_characters_in_strings_match_string_with_nul" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_simple_enum_validation_one_of_the_enum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_enum_simple_enum_validation_something_else_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_extends_extends" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_extends_extends&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_extends_mismatch_extended" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_extends_mismatch_extended&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_extends_mismatch_extends" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_extends_mismatch_extends&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_extends_simple_types_mismatch_extends" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_extends_simple_types_mismatch_extends&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_extends_simple_types_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_extends_simple_types_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_extends_wrong_type" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_extends_wrong_type&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_multiple_extends_mismatch_both" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_multiple_extends_mismatch_both&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_multiple_extends_mismatch_first_extends" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_multiple_extends_mismatch_first_extends&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_multiple_extends_mismatch_second_extends" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_multiple_extends_mismatch_second_extends&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_extends_multiple_extends_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_extends_multiple_extends_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_color_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_color_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_color_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_color_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_color_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_color_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_time_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_time_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_time_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_time_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_time_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_date_time_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_email_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_email_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_email_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_email_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_email_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_email_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_host_name_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_host_name_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_host_name_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_host_name_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_host_name_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_host_name_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ip_address_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ip_address_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ip_address_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ip_address_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ip_address_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ip_address_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ipv6_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ipv6_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ipv6_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ipv6_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ipv6_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_ipv6_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_regex_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_regex_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_regex_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_regex_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_regex_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_regex_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_time_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_time_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_time_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_time_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_time_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_time_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_uri_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_uri_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_uri_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_uri_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_uri_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_format_uri_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_a_host_name_containing_illegal_characters" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_a_host_name_starting_with_an_illegal_character" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_a_host_name_with_a_component_too_long" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_a_valid_host_name" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_contains_underscore" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_empty_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_ends_with_hyphen" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_ends_with_underscore" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_exceeds_maximum_label_length" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_maximum_label_length" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_starts_with_hyphen" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_host_name_validation_of_host_names_starts_with_underscore" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_infinite_loop_detection_evaluating_the_same_schema_location_against_the_same_data_location_twice_is_not_a_sign_of_an_infinite_loop_failing_case" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_infinite_loop_detection_evaluating_the_same_schema_location_against_the_same_data_location_twice_is_not_a_sign_of_an_infinite_loop_failing_case&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_infinite_loop_detection_evaluating_the_same_schema_location_against_the_same_data_location_twice_is_not_a_sign_of_an_infinite_loop_passing_case" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_infinite_loop_detection_evaluating_the_same_schema_location_against_the_same_data_location_twice_is_not_a_sign_of_an_infinite_loop_passing_case&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ip_address_validation_of_IP_addresses_a_valid_IP_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ip_address_validation_of_IP_addresses_an_IP_address_with_out_of_range_values" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ip_address_validation_of_IP_addresses_an_IP_address_with_too_many_components" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_a_valid_IPv6_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_an_IPv6_address_containing_illegal_characters" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_an_IPv6_address_with_out_of_range_values" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_an_IPv6_address_with_too_many_components" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_leading_colons_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_double_colons_between_the_sections" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_ipv4_section_with_a_hex_octet" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_ipv4_section_with_octet_out_of_range" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_the_ipv4_section_as_decimal_octets" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_no_digits_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_trailing_colons_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ipv6_validation_of_IPv6_addresses_two_sets_of_double_colons_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_items_a_schema_given_for_items_ignores_non_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_items_a_schema_given_for_items_ignores_non_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_items_a_schema_given_for_items_valid_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_items_a_schema_given_for_items_valid_items&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_items_a_schema_given_for_items_wrong_type_of_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_items_a_schema_given_for_items_wrong_type_of_items&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_items_an_array_of_schemas_for_items_correct_types" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_items_an_array_of_schemas_for_items_correct_types&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_items_an_array_of_schemas_for_items_wrong_types" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_items_an_array_of_schemas_for_items_wrong_types&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_items_array_form_items_with_null_instance_elements_allows_null_elements" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_items_array_form_items_with_null_instance_elements_allows_null_elements&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_items_items_with_null_instance_elements_allows_null_elements" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_items_items_with_null_instance_elements_allows_null_elements&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxItems_maxItems_validation_exact_length_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxItems_maxItems_validation_ignores_non_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxItems_maxItems_validation_shorter_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxItems_maxItems_validation_too_long_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxLength_maxLength_validation_exact_length_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxLength_maxLength_validation_ignores_non_strings" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxLength_maxLength_validation_shorter_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxLength_maxLength_validation_too_long_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maxLength_maxLength_validation_two_graphemes_is_long_enough" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_exclusiveMaximum_validation_below_the_maximum_is_still_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_exclusiveMaximum_validation_boundary_point_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_above_the_maximum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_below_the_maximum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_explicit_false_exclusivity__above_the_maximum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_explicit_false_exclusivity__below_the_maximum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_explicit_false_exclusivity__boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_explicit_false_exclusivity__ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_with_unsigned_integer_above_the_maximum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_with_unsigned_integer_below_the_maximum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_with_unsigned_integer_boundary_point_float_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_maximum_maximum_validation_with_unsigned_integer_boundary_point_integer_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minItems_minItems_validation_exact_length_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minItems_minItems_validation_ignores_non_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minItems_minItems_validation_longer_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minItems_minItems_validation_too_short_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minLength_minLength_validation_exact_length_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minLength_minLength_validation_ignores_non_strings" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minLength_minLength_validation_longer_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minLength_minLength_validation_one_grapheme_is_not_long_enough" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minLength_minLength_validation_too_short_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_exclusiveMinimum_validation_above_the_minimum_is_still_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_exclusiveMinimum_validation_boundary_point_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_above_the_minimum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_below_the_minimum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_with_signed_integer_boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_with_signed_integer_boundary_point_with_float_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_with_signed_integer_float_below_the_minimum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_with_signed_integer_ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_with_signed_integer_int_below_the_minimum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_with_signed_integer_negative_above_the_minimum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_minimum_minimum_validation_with_signed_integer_positive_above_the_minimum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_doesn_t_match_one" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_doesn_t_match_one&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_doesn_t_match_two" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_doesn_t_match_two&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_empty" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_empty&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_single" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_single&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_two" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_two&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_doesn_t_match_one" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_doesn_t_match_one_ASCII" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_doesn_t_match_two" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_doesn_t_match_two_ASCII" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_matches_empty" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_matches_single" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_matches_two" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_a_simultaneous_match_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_a_simultaneous_match_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_a_single_valid_match_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_a_single_valid_match_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_both_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_both_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_one_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_one_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_the_other_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_the_other_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_multiple_matches_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_multiple_matches_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_a_single_invalid_match_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_a_single_invalid_match_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_a_single_valid_match_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_a_single_valid_match_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_multiple_invalid_matches_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_multiple_invalid_matches_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_multiple_valid_matches_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_multiple_valid_matches_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_patternProperties_with_null_valued_instance_properties_allows_null_values" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_patternProperties_with_null_valued_instance_properties_allows_null_values&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_non_recognized_members_are_ignored" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_non_recognized_members_are_ignored&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_recognized_members_are_accounted_for" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_recognized_members_are_accounted_for&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_regexes_are_case_sensitive" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_regexes_are_case_sensitive&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_regexes_are_case_sensitive_2" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_regexes_are_case_sensitive_2&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_is_not_anchored_matches_a_substring" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_validation_a_matching_pattern_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_validation_a_non_matching_pattern_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_validation_ignores_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_validation_ignores_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_validation_ignores_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_validation_ignores_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_validation_ignores_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_pattern_pattern_validation_ignores_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_object_properties_validation_both_properties_invalid_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_object_properties_validation_both_properties_invalid_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_object_properties_validation_both_properties_present_and_valid_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_object_properties_validation_both_properties_present_and_valid_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_object_properties_validation_doesn_t_invalidate_other_properties" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_object_properties_validation_doesn_t_invalidate_other_properties&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_object_properties_validation_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_object_properties_validation_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_object_properties_validation_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_object_properties_validation_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_object_properties_validation_one_property_invalid_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_object_properties_validation_one_property_invalid_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_ignores_property" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_ignores_property&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_invalidates_others" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_invalidates_others&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_validates_others" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_validates_others&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_invalidates_nonproperty" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_invalidates_nonproperty&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_invalidates_property" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_invalidates_property&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_validates_nonproperty" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_validates_nonproperty&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_patternProperties_additionalProperties_interaction_property_invalidates_property" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_property_invalidates_property&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_patternProperties_additionalProperties_interaction_property_validates_property" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_property_validates_property&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_properties_properties_with_null_valued_instance_properties_allows_null_values" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_properties_properties_with_null_valued_instance_properties_allows_null_values&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_refRemote_change_resolution_scope_changed_scope_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_refRemote_change_resolution_scope_changed_scope_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_refRemote_change_resolution_scope_changed_scope_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_refRemote_change_resolution_scope_changed_scope_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_refRemote_fragment_within_remote_ref_remote_fragment_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_refRemote_fragment_within_remote_ref_remote_fragment_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_refRemote_fragment_within_remote_ref_remote_fragment_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_refRemote_fragment_within_remote_ref_remote_fragment_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://localhost:1234/draft3/subSchemas.json#/definitions/integer'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_refRemote_ref_within_remote_ref_ref_within_ref_invalid" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_refRemote_ref_within_remote_ref_ref_within_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_refRemote_ref_within_remote_ref_ref_within_ref_valid" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_refRemote_ref_within_remote_ref_ref_within_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://localhost:1234/draft3/subSchemas.json#/definitions/refToInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_refRemote_remote_ref_remote_ref_invalid" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_refRemote_remote_ref_remote_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_refRemote_remote_ref_remote_ref_valid" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_refRemote_remote_ref_remote_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://localhost:1234/integer.json'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref__ref_prevents_a_sibling_id_from_changing_the_base_uri__ref_resolves_to_definitions_base_foo_data_does_not_validate" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref__ref_prevents_a_sibling_id_from_changing_the_base_uri__ref_resolves_to_definitions_base_foo_data_does_not_validate&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref__ref_prevents_a_sibling_id_from_changing_the_base_uri__ref_resolves_to_definitions_base_foo_data_validates" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref__ref_prevents_a_sibling_id_from_changing_the_base_uri__ref_resolves_to_definitions_base_foo_data_validates&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_escaped_pointer_ref_percent_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_escaped_pointer_ref_percent_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_escaped_pointer_ref_percent_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_escaped_pointer_ref_percent_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_escaped_pointer_ref_slash_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_escaped_pointer_ref_slash_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_escaped_pointer_ref_slash_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_escaped_pointer_ref_slash_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_escaped_pointer_ref_tilde_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_escaped_pointer_ref_tilde_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_escaped_pointer_ref_tilde_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_escaped_pointer_ref_tilde_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_naive_replacement_of_ref_with_its_destination_is_not_correct_do_not_evaluate_the_ref_inside_the_enum_matching_any_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_naive_replacement_of_ref_with_its_destination_is_not_correct_match_the_enum_exactly" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_nested_refs_nested_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_nested_refs_nested_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_nested_refs_nested_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_nested_refs_nested_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/c', 'definitions': {'a': {'type': 'integer'}, 'b': {'$ref': '#/definitions/a'}, 'c': {'$ref': '#/definitions/b'}}}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_property_named_ref_containing_an_actual_ref_property_named_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_property_named_ref_containing_an_actual_ref_property_named_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_property_named_ref_containing_an_actual_ref_property_named_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_property_named_ref_containing_an_actual_ref_property_named_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_ref_overrides_any_sibling_keywords_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_ref_overrides_any_sibling_keywords_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_ref_overrides_any_sibling_keywords_remote_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_ref_overrides_any_sibling_keywords_remote_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_ref_overrides_any_sibling_keywords_remote_ref_valid_maxItems_ignored" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_ref_overrides_any_sibling_keywords_remote_ref_valid_maxItems_ignored&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_relative_pointer_ref_to_array_match_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_relative_pointer_ref_to_array_match_array&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_relative_pointer_ref_to_array_mismatch_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_relative_pointer_ref_to_array_mismatch_array&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_relative_pointer_ref_to_object_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_relative_pointer_ref_to_object_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_relative_pointer_ref_to_object_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_relative_pointer_ref_to_object_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_remote_ref_containing_refs_itself_remote_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_remote_ref_containing_refs_itself_remote_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_remote_ref_containing_refs_itself_remote_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_remote_ref_containing_refs_itself_remote_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://json-schema.org/draft-03/schema#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_root_pointer_ref_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_root_pointer_ref_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_root_pointer_ref_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_root_pointer_ref_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_root_pointer_ref_recursive_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_root_pointer_ref_recursive_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_ref_root_pointer_ref_recursive_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_ref_root_pointer_ref_recursive_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_regex_validation_of_regular_expressions_a_regular_expression_with_unclosed_parens_is_invalid" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_regex_validation_of_regular_expressions_a_valid_regular_expression" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_required_required_default_validation_not_required_by_default" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_required_required_default_validation_not_required_by_default&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_required_required_explicitly_false_validation_not_required_if_required_is_false" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_required_required_explicitly_false_validation_not_required_if_required_is_false&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_required_required_validation_non_present_required_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_required_required_validation_non_present_required_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_required_required_validation_present_required_property_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_required_required_validation_present_required_property_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_time_validation_of_time_strings_a_valid_time_string" time="0.002" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_time_validation_of_time_strings_an_invalid_time_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_any_type_matches_any_type_any_type_includes_array" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_any_type_matches_any_type_any_type_includes_boolean" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_any_type_matches_any_type_any_type_includes_float" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_any_type_matches_any_type_any_type_includes_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_any_type_matches_any_type_any_type_includes_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_any_type_matches_any_type_any_type_includes_object" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_any_type_matches_any_type_any_type_includes_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_applies_a_nested_schema_an_integer_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_applies_a_nested_schema_an_integer_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_applies_a_nested_schema_an_object_is_invalid_otherwise" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_applies_a_nested_schema_an_object_is_invalid_otherwise&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_applies_a_nested_schema_an_object_is_valid_only_if_it_is_fully_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_applies_a_nested_schema_an_object_is_valid_only_if_it_is_fully_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_array_type_matches_arrays_a_boolean_is_not_an_array" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_array_type_matches_arrays_a_float_is_not_an_array" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_array_type_matches_arrays_a_string_is_not_an_array" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_array_type_matches_arrays_an_array_is_an_array" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_array_type_matches_arrays_an_integer_is_not_an_array" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_array_type_matches_arrays_an_object_is_not_an_array" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_array_type_matches_arrays_null_is_not_an_array" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_boolean_type_matches_booleans_a_boolean_is_a_boolean" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_boolean_type_matches_booleans_a_float_is_not_a_boolean" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_boolean_type_matches_booleans_a_string_is_not_a_boolean" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_boolean_type_matches_booleans_an_array_is_not_a_boolean" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_boolean_type_matches_booleans_an_integer_is_not_a_boolean" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_boolean_type_matches_booleans_an_object_is_not_a_boolean" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_boolean_type_matches_booleans_null_is_not_a_boolean" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_integer_type_matches_integers_a_boolean_is_not_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_integer_type_matches_integers_a_float_is_not_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_integer_type_matches_integers_a_string_is_not_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_integer_type_matches_integers_a_string_is_still_not_an_integer_even_if_it_looks_like_one" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_integer_type_matches_integers_an_array_is_not_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_integer_type_matches_integers_an_integer_is_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_integer_type_matches_integers_an_object_is_not_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_integer_type_matches_integers_null_is_not_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_multiple_types_can_be_specified_in_an_array_a_boolean_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_multiple_types_can_be_specified_in_an_array_a_float_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_multiple_types_can_be_specified_in_an_array_a_string_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_multiple_types_can_be_specified_in_an_array_an_array_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_multiple_types_can_be_specified_in_an_array_an_integer_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_multiple_types_can_be_specified_in_an_array_an_object_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_multiple_types_can_be_specified_in_an_array_null_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_null_type_matches_only_the_null_object_a_boolean_is_not_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_null_type_matches_only_the_null_object_a_float_is_not_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_null_type_matches_only_the_null_object_a_string_is_not_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_null_type_matches_only_the_null_object_an_array_is_not_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_null_type_matches_only_the_null_object_an_integer_is_not_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_null_type_matches_only_the_null_object_an_object_is_not_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_null_type_matches_only_the_null_object_null_is_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_a_boolean_is_not_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_a_float_is_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_a_float_with_zero_fractional_part_is_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_a_string_is_not_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_a_string_is_still_not_a_number_even_if_it_looks_like_one" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_an_array_is_not_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_an_integer_is_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_an_object_is_not_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_number_type_matches_numbers_null_is_not_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_object_type_matches_objects_a_boolean_is_not_an_object" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_object_type_matches_objects_a_float_is_not_an_object" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_object_type_matches_objects_a_string_is_not_an_object" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_object_type_matches_objects_an_array_is_not_an_object" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_object_type_matches_objects_an_integer_is_not_an_object" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_object_type_matches_objects_an_object_is_an_object" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_object_type_matches_objects_null_is_not_an_object" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_string_type_matches_strings_1_is_not_a_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_string_type_matches_strings_a_boolean_is_not_a_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_string_type_matches_strings_a_float_is_not_a_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_string_type_matches_strings_a_string_is_a_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_string_type_matches_strings_a_string_is_still_a_string_even_if_it_looks_like_a_number" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_string_type_matches_strings_an_array_is_not_a_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_string_type_matches_strings_an_object_is_not_a_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_string_type_matches_strings_null_is_not_a_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_can_include_schemas_a_boolean_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_can_include_schemas_a_boolean_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_can_include_schemas_a_float_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_can_include_schemas_a_float_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_can_include_schemas_a_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_can_include_schemas_a_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_can_include_schemas_an_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_can_include_schemas_an_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_can_include_schemas_an_integer_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_can_include_schemas_an_integer_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_can_include_schemas_an_object_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_can_include_schemas_an_object_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_can_include_schemas_null_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_can_include_schemas_null_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_from_separate_schemas_are_merged_a_string_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_from_separate_schemas_are_merged_a_string_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_from_separate_schemas_are_merged_an_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_from_separate_schemas_are_merged_an_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_type_types_from_separate_schemas_are_merged_an_integer_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_type_types_from_separate_schemas_are_merged_an_integer_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:98: in items_draft3_draft4
    else:
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_0_and_false_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_1_and_true_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_non_unique_array_of_arrays_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_non_unique_array_of_integers_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_non_unique_array_of_nested_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_non_unique_array_of_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_non_unique_heterogeneous_types_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_numbers_are_unique_if_mathematically_unequal" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_unique_array_of_arrays_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_unique_array_of_integers_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_unique_array_of_nested_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_unique_array_of_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_validation_unique_heterogeneous_types_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items__false_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items__false_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items__false_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items__false_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items__true_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items__true_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items__true_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items__true_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__false_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__false_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__false_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__false_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__true_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__true_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__true_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__true_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false_extra_items_are_invalid_even_if_unique" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false_extra_items_are_invalid_even_if_unique&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_non_unique_array_extended_from_false_true_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_non_unique_array_extended_from_false_true_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_non_unique_array_extended_from_true_false_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_non_unique_array_extended_from_true_false_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_unique_array_extended_from_false_true_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_unique_array_extended_from_false_true_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_unique_array_extended_from_true_false_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_unique_array_extended_from_true_false_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_0_and_false_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_1_and_true_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation__0_and_false_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation__1_and_true_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation__a_false_and_a_0_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation__a_true_and_a_1_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_nested_0_and_false_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_nested_1_and_true_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_arrays_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_integers_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_more_than_two_arrays_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_more_than_two_integers_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_nested_objects_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_objects_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_strings_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_non_unique_heterogeneous_types_are_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_numbers_are_unique_if_mathematically_unequal" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_unique_array_of_arrays_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_unique_array_of_integers_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_unique_array_of_nested_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_unique_array_of_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_unique_array_of_strings_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_validation_unique_heterogeneous_types_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items__false_false_from_items_array_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items__false_false_from_items_array_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items__false_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items__false_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items__true_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items__true_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items__true_true_from_items_array_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items__true_true_from_items_array_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__false_false_from_items_array_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__false_false_from_items_array_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__false_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__false_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__true_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__true_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__true_true_from_items_array_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__true_true_from_items_array_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false_extra_items_are_invalid_even_if_unique" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false_extra_items_are_invalid_even_if_unique&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_non_unique_array_extended_from_false_true_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_non_unique_array_extended_from_false_true_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_non_unique_array_extended_from_true_false_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_non_unique_array_extended_from_true_false_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_unique_array_extended_from_false_true_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_unique_array_extended_from_false_true_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uniqueItems_uniqueItems_with_an_array_of_items_unique_array_extended_from_true_false_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft3 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_unique_array_extended_from_true_false_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_legacy_keywords.py:176: in properties_draft3
    instance[property],
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_legacy_keywords.py:201: in type_draft3
    if not errors:
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uri_validation_of_URIs_a_valid_URI" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uri_validation_of_URIs_an_invalid_URI" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uri_validation_of_URIs_an_invalid_URI_though_valid_URI_reference" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_uri_validation_of_URIs_an_invalid_protocol_relative_URI_Reference" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft3" name="test_zeroTerminatedFloats_some_languages_do_not_distinguish_between_different_types_of_numeric_value_a_float_is_not_an_integer_even_without_fractional_part" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_are_allowed_by_default_only_the_first_item_is_validated" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_additionalItems_are_allowed_by_default_only_the_first_item_is_validated&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_as_false_without_items_ignores_non_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_as_false_without_items_items_defaults_to_empty_schema_so_everything_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_as_schema_additional_items_do_not_match_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_additionalItems_as_schema_additional_items_do_not_match_schema&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_as_schema_additional_items_match_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_additionalItems_as_schema_additional_items_match_schema&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_does_not_look_in_applicators_invalid_case_items_defined_in_allOf_are_not_examined" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_additionalItems_does_not_look_in_applicators_invalid_case_items_defined_in_allOf_are_not_examined&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_does_not_look_in_applicators_valid_case_items_defined_in_allOf_are_not_examined" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_additionalItems_does_not_look_in_applicators_valid_case_items_defined_in_allOf_are_not_examined&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_with_heterogeneous_array_heterogeneous_invalid_instance" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_additionalItems_with_heterogeneous_array_heterogeneous_invalid_instance&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_with_heterogeneous_array_valid_instance" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_additionalItems_with_heterogeneous_array_valid_instance&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_additionalItems_with_null_instance_elements_allows_null_elements" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_additionalItems_with_null_instance_elements_allows_null_elements&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_additional_items_are_not_permitted" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_additional_items_are_not_permitted&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_empty_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_empty_array&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_equal_number_of_items_present" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_equal_number_of_items_present&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_fewer_number_of_items_present_1_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_fewer_number_of_items_present_1_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_array_of_items_with_no_additionalItems_permitted_fewer_number_of_items_present_2_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_array_of_items_with_no_additionalItems_permitted_fewer_number_of_items_present_2_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_items_validation_adjusts_the_starting_index_for_additionalItems_valid_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_items_validation_adjusts_the_starting_index_for_additionalItems_valid_items&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_items_validation_adjusts_the_starting_index_for_additionalItems_wrong_type_of_second_item" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_items_validation_adjusts_the_starting_index_for_additionalItems_wrong_type_of_second_item&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalItems_when_items_is_schema_additionalItems_does_nothing_all_items_match_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalItems_when_items_is_schema_additionalItems_does_nothing_all_items_match_schema&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_are_allowed_by_default_additional_properties_are_allowed" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_are_allowed_by_default_additional_properties_are_allowed&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_an_additional_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_an_additional_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_ignores_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_no_additional_properties_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_no_additional_properties_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_patternProperties_are_not_additional_properties" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_being_false_does_not_allow_other_properties_patternProperties_are_not_additional_properties&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_can_exist_by_itself_an_additional_invalid_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_can_exist_by_itself_an_additional_invalid_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_can_exist_by_itself_an_additional_valid_property_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_can_exist_by_itself_an_additional_valid_property_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_does_not_look_in_applicators_properties_defined_in_allOf_are_not_examined" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_does_not_look_in_applicators_properties_defined_in_allOf_are_not_examined&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_with_null_valued_instance_properties_allows_null_values" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_with_null_valued_instance_properties_allows_null_values&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_with_schema_an_additional_invalid_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_with_schema_an_additional_invalid_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_with_schema_an_additional_valid_property_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_with_schema_an_additional_valid_property_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_additionalProperties_with_schema_no_additional_properties_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_additionalProperties_with_schema_no_additional_properties_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_non_ASCII_pattern_with_additionalProperties_matching_the_pattern_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_non_ASCII_pattern_with_additionalProperties_matching_the_pattern_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_additionalProperties_non_ASCII_pattern_with_additionalProperties_not_matching_the_pattern_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_additionalProperties_non_ASCII_pattern_with_additionalProperties_not_matching_the_pattern_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_allOf" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_allOf&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_combined_with_anyOf_oneOf_allOf_false_anyOf_false_oneOf_false" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_combined_with_anyOf_oneOf_allOf_false_anyOf_false_oneOf_false&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_combined_with_anyOf_oneOf_allOf_false_anyOf_false_oneOf_true" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_combined_with_anyOf_oneOf_allOf_false_anyOf_false_oneOf_true&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_combined_with_anyOf_oneOf_allOf_false_anyOf_true_oneOf_false" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_combined_with_anyOf_oneOf_allOf_false_anyOf_true_oneOf_false&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_combined_with_anyOf_oneOf_allOf_false_anyOf_true_oneOf_true" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_combined_with_anyOf_oneOf_allOf_false_anyOf_true_oneOf_true&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_combined_with_anyOf_oneOf_allOf_true_anyOf_false_oneOf_false" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_combined_with_anyOf_oneOf_allOf_true_anyOf_false_oneOf_false&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_combined_with_anyOf_oneOf_allOf_true_anyOf_false_oneOf_true" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_combined_with_anyOf_oneOf_allOf_true_anyOf_false_oneOf_true&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_combined_with_anyOf_oneOf_allOf_true_anyOf_true_oneOf_false" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_combined_with_anyOf_oneOf_allOf_true_anyOf_true_oneOf_false&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_combined_with_anyOf_oneOf_allOf_true_anyOf_true_oneOf_true" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_combined_with_anyOf_oneOf_allOf_true_anyOf_true_oneOf_true&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_mismatch_first" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_mismatch_first&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_mismatch_second" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_mismatch_second&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_simple_types_mismatch_one" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_simple_types_mismatch_one&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_simple_types_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_simple_types_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_base_schema_mismatch_base_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_base_schema_mismatch_base_schema&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_base_schema_mismatch_both" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_base_schema_mismatch_both&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_base_schema_mismatch_first_allOf" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_base_schema_mismatch_first_allOf&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_base_schema_mismatch_second_allOf" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_base_schema_mismatch_second_allOf&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_base_schema_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_base_schema_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_one_empty_schema_any_data_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_one_empty_schema_any_data_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_the_first_empty_schema_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_the_first_empty_schema_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_the_first_empty_schema_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_the_first_empty_schema_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_the_last_empty_schema_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_the_last_empty_schema_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_the_last_empty_schema_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_the_last_empty_schema_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_with_two_empty_schemas_any_data_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_with_two_empty_schemas_any_data_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_allOf_wrong_type" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_allOf_wrong_type&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_nested_allOf_to_check_validation_semantics_anything_non_null_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_nested_allOf_to_check_validation_semantics_anything_non_null_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_allOf_nested_allOf_to_check_validation_semantics_null_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_allOf_nested_allOf_to_check_validation_semantics_null_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_both_anyOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_both_anyOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_complex_types_both_anyOf_valid_complex_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_complex_types_both_anyOf_valid_complex_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_complex_types_first_anyOf_valid_complex_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_complex_types_first_anyOf_valid_complex_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_complex_types_neither_anyOf_valid_complex_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_complex_types_neither_anyOf_valid_complex_&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_complex_types_second_anyOf_valid_complex_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_complex_types_second_anyOf_valid_complex_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_first_anyOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_first_anyOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_neither_anyOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_neither_anyOf_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_second_anyOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_second_anyOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_with_base_schema_both_anyOf_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_with_base_schema_both_anyOf_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_with_base_schema_mismatch_base_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_with_base_schema_mismatch_base_schema&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_with_base_schema_one_anyOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_with_base_schema_one_anyOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_with_one_empty_schema_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_with_one_empty_schema_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_anyOf_with_one_empty_schema_string_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_anyOf_with_one_empty_schema_string_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_nested_anyOf_to_check_validation_semantics_anything_non_null_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_nested_anyOf_to_check_validation_semantics_anything_non_null_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_anyOf_nested_anyOf_to_check_validation_semantics_null_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_anyOf_nested_anyOf_to_check_validation_semantics_null_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_float_comparison_with_high_precision_comparison_works_for_high_numbers" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_float_comparison_with_high_precision_on_negative_numbers_comparison_works_for_very_negative_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_integer_a_bignum_is_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_bignum_integer_a_bignum_is_an_integer&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_integer_a_negative_bignum_is_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_bignum_integer_a_negative_bignum_is_an_integer&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_maximum_integer_comparison_comparison_works_for_high_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_minimum_integer_comparison_comparison_works_for_very_negative_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_number_a_bignum_is_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_bignum_number_a_bignum_is_a_number&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_number_a_negative_bignum_is_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_bignum_number_a_negative_bignum_is_a_number&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_bignum_string_a_bignum_is_not_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_bignum_string_a_bignum_is_not_a_string&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_a_valid_date_time_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_a_valid_date_time_string_with_minus_offset" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_a_valid_date_time_string_with_plus_offset" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_a_valid_date_time_string_without_second_fraction" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_a_valid_date_time_with_a_leap_second_UTC" time="0.000"><skipped type="pytest.skip" message="Leap seconds are unsupported.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:233: Leap seconds are unsupported.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_a_valid_date_time_with_a_leap_second_with_minus_offset" time="0.000"><skipped type="pytest.skip" message="Leap seconds are unsupported.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:233: Leap seconds are unsupported.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_an_invalid_closing_Z_after_time_zone_offset" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_an_invalid_date_time_past_leap_second_UTC" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_an_invalid_date_time_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_an_invalid_date_time_with_leap_second_on_a_wrong_hour_UTC" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_an_invalid_date_time_with_leap_second_on_a_wrong_minute_UTC" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_an_invalid_day_in_date_time_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_an_invalid_offset_in_date_time_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_case_insensitive_T_and_Z" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_invalid_non_ASCII_৪_a_Bengali_4_in_date_portion" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_invalid_non_ASCII_৪_a_Bengali_4_in_time_portion" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_invalid_non_padded_day_dates" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_invalid_non_padded_month_dates" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_date_time_validation_of_date_time_strings_only_RFC3339_not_all_of_ISO_8601_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_default_invalid_string_value_for_default_still_valid_when_the_invalid_default_is_used" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_default_invalid_string_value_for_default_still_valid_when_the_invalid_default_is_used&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_default_invalid_string_value_for_default_valid_when_property_is_specified" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_default_invalid_string_value_for_default_valid_when_property_is_specified&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_default_invalid_type_for_default_still_valid_when_the_invalid_default_is_used" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_default_invalid_type_for_default_still_valid_when_the_invalid_default_is_used&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_default_invalid_type_for_default_valid_when_property_is_specified" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_default_invalid_type_for_default_valid_when_property_is_specified&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_an_explicit_property_value_is_checked_against_maximum_failing_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_an_explicit_property_value_is_checked_against_maximum_failing_&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_an_explicit_property_value_is_checked_against_maximum_passing_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_an_explicit_property_value_is_checked_against_maximum_passing_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_missing_properties_are_not_filled_in_with_the_default" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_default_the_default_keyword_does_not_do_anything_if_the_property_is_missing_missing_properties_are_not_filled_in_with_the_default&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_definitions_validate_definition_against_metaschema_invalid_definition_schema" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_definitions_validate_definition_against_metaschema_invalid_definition_schema&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_definitions_validate_definition_against_metaschema_valid_definition_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_definitions_validate_definition_against_metaschema_valid_definition_schema&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://json-schema.org/draft-04/schema#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_ignores_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_ignores_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_missing_dependency" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_missing_dependency&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_neither" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_neither&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_nondependant" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_nondependant&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_with_dependency" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_with_dependency&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_with_escaped_characters_invalid_object_1" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_with_escaped_characters_invalid_object_1&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_with_escaped_characters_invalid_object_2" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_with_escaped_characters_invalid_object_2&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_with_escaped_characters_invalid_object_3" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_with_escaped_characters_invalid_object_3&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_with_escaped_characters_invalid_object_4" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_with_escaped_characters_invalid_object_4&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_with_escaped_characters_valid_object_1" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_with_escaped_characters_valid_object_1&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_with_escaped_characters_valid_object_2" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_with_escaped_characters_valid_object_2&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependencies_with_escaped_characters_valid_object_3" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependencies_with_escaped_characters_valid_object_3&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependent_subschema_incompatible_with_root_matches_both" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependent_subschema_incompatible_with_root_matches_both&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependent_subschema_incompatible_with_root_matches_dependency" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependent_subschema_incompatible_with_root_matches_dependency&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependent_subschema_incompatible_with_root_matches_root" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependent_subschema_incompatible_with_root_matches_root&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_dependent_subschema_incompatible_with_root_no_dependency" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_dependent_subschema_incompatible_with_root_no_dependency&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_missing_both_dependencies" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_missing_both_dependencies&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_missing_dependency" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_missing_dependency&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_missing_other_dependency" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_missing_other_dependency&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_neither" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_neither&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_nondependants" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_nondependants&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_subschema_no_dependency" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_subschema_no_dependency&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_subschema_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_subschema_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_subschema_wrong_type" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_subschema_wrong_type&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_subschema_wrong_type_both" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_subschema_wrong_type_both&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_subschema_wrong_type_other" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_subschema_wrong_type_other&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_dependencies_multiple_dependencies_with_dependencies" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_dependencies_multiple_dependencies_with_dependencies&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_a_valid_e_mail_address" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_an_invalid_e_mail_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_dot_after_local_part_is_not_valid" time="0.000"><skipped type="pytest.skip" message="Complex email validation is (intentionally) unsupported.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:236: Complex email validation is (intentionally) unsupported.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_dot_before_local_part_is_not_valid" time="0.000"><skipped type="pytest.skip" message="Complex email validation is (intentionally) unsupported.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:236: Complex email validation is (intentionally) unsupported.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_tilde_after_local_part_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_tilde_before_local_part_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_tilde_in_local_part_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_two_separated_dots_inside_local_part_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_email_validation_of_e_mail_addresses_two_subsequent_dots_inside_local_part_are_not_valid" time="0.000"><skipped type="pytest.skip" message="Complex email validation is (intentionally) unsupported.">/home/tymofii/school/isp/debugger-enhanced-code-completion/example/jsonschema/jsonschema/tests/_suite.py:236: Complex email validation is (intentionally) unsupported.</skipped></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_0_does_not_match_false___0_0_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_0_does_not_match_false___0_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_0_does_not_match_false___false_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_0_does_not_match_false_false_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_0_does_not_match_false_float_zero_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_0_does_not_match_false_integer_zero_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_1_does_not_match_true___1_0_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_1_does_not_match_true___1_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_1_does_not_match_true___true_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_1_does_not_match_true_float_one_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_1_does_not_match_true_integer_one_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_1_does_not_match_true_true_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_escaped_characters_another_string_is_invalid" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_escaped_characters_member_1_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_escaped_characters_member_2_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_false_does_not_match_0___0_0_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_false_does_not_match_0___0_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_false_does_not_match_0___false_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_false_does_not_match_0_false_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_false_does_not_match_0_float_zero_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_false_does_not_match_0_integer_zero_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_true_does_not_match_1___1_0_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_true_does_not_match_1___1_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_true_does_not_match_1___true_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_true_does_not_match_1_float_one_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_true_does_not_match_1_integer_one_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enum_with_true_does_not_match_1_true_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enums_in_properties_both_properties_are_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_enum_enums_in_properties_both_properties_are_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enums_in_properties_missing_all_properties_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_enum_enums_in_properties_missing_all_properties_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enums_in_properties_missing_optional_property_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_enum_enums_in_properties_missing_optional_property_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enums_in_properties_missing_required_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_enum_enums_in_properties_missing_required_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enums_in_properties_wrong_bar_value" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_enum_enums_in_properties_wrong_bar_value&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_enums_in_properties_wrong_foo_value" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_enum_enums_in_properties_wrong_foo_value&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_heterogeneous_enum_validation_extra_properties_in_object_is_invalid" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_heterogeneous_enum_validation_objects_are_deep_compared" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_heterogeneous_enum_validation_one_of_the_enum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_heterogeneous_enum_validation_something_else_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_heterogeneous_enum_validation_valid_object_matches" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_heterogeneous_enum_with_null_validation_null_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_heterogeneous_enum_with_null_validation_number_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_heterogeneous_enum_with_null_validation_something_else_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_nul_characters_in_strings_do_not_match_string_lacking_nul" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_nul_characters_in_strings_match_string_with_nul" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_simple_enum_validation_one_of_the_enum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_enum_simple_enum_validation_something_else_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_float_overflow_all_integers_are_multiples_of_0_5_if_overflow_is_handled_valid_if_optional_overflow_handling_is_implemented" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_float_overflow_all_integers_are_multiples_of_0_5_if_overflow_is_handled_valid_if_optional_overflow_handling_is_implemented&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_date_time_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_date_time_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_date_time_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_date_time_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_date_time_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_date_time_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_email_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_email_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_email_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_email_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_email_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_email_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_hostname_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_hostname_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_hostname_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_hostname_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_hostname_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_hostname_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv4_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv4_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv4_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv4_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv4_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv4_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv6_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv6_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv6_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv6_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv6_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_ipv6_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_uri_format_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_uri_format_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_uri_format_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_uri_format_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_uri_format_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_format_uri_format_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_a_host_name_containing_illegal_characters" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_a_host_name_starting_with_an_illegal_character" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_a_host_name_with_a_component_too_long" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_a_valid_host_name" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_a_valid_punycoded_IDN_hostname" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_contains_underscore" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_empty_string" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_ends_with_hyphen" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_ends_with_underscore" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_exceeds_maximum_label_length" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_maximum_label_length" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_single_dot" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_single_label" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_single_label_ending_with_digit" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_single_label_with_digits" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_single_label_with_hyphen" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_starts_with_hyphen" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_hostname_validation_of_host_names_starts_with_underscore" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_id_id_inside_an_enum_is_not_a_real_identifier_exact_match_to_enum_and_type_matches" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_id_id_inside_an_enum_is_not_a_real_identifier_exact_match_to_enum_and_type_matches&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_id_id_inside_an_enum_is_not_a_real_identifier_match_ref_to_id" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_id_id_inside_an_enum_is_not_a_real_identifier_match_ref_to_id&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_id_id_inside_an_enum_is_not_a_real_identifier_no_match_on_enum_or_ref_to_id" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_id_id_inside_an_enum_is_not_a_real_identifier_no_match_on_enum_or_ref_to_id&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_infinite_loop_detection_evaluating_the_same_schema_location_against_the_same_data_location_twice_is_not_a_sign_of_an_infinite_loop_failing_case" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_infinite_loop_detection_evaluating_the_same_schema_location_against_the_same_data_location_twice_is_not_a_sign_of_an_infinite_loop_failing_case&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_infinite_loop_detection_evaluating_the_same_schema_location_against_the_same_data_location_twice_is_not_a_sign_of_an_infinite_loop_passing_case" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_infinite_loop_detection_evaluating_the_same_schema_location_against_the_same_data_location_twice_is_not_a_sign_of_an_infinite_loop_passing_case&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_a_valid_IP_address" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_an_IP_address_as_an_integer" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_an_IP_address_as_an_integer_decimal_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_an_IP_address_with_out_of_range_values" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_an_IP_address_with_too_many_components" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_an_IP_address_without_4_components" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_invalid_leading_zeroes_as_they_are_treated_as_octals" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_invalid_non_ASCII_২_a_Bengali_2_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_netmask_is_not_a_part_of_ipv4_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv4_validation_of_IP_addresses_value_without_leading_zero_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_8_octets" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_a_long_invalid_ipv6_below_length_limit_first" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_a_long_invalid_ipv6_below_length_limit_second" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_a_long_valid_ipv6" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_a_valid_IPv6_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_all_string_formats_ignore_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_all_string_formats_ignore_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_all_string_formats_ignore_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_all_string_formats_ignore_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_all_string_formats_ignore_nulls" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_all_string_formats_ignore_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_an_IPv6_address_containing_illegal_characters" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_an_IPv6_address_with_out_of_range_values" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_an_IPv6_address_with_too_many_components" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_insufficient_octets_without_double_colons" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_invalid_non_ASCII_৪_a_Bengali_4_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_invalid_non_ASCII_৪_a_Bengali_4_in_the_IPv4_portion" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_ipv4_is_not_ipv6" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_ipv4_segment_must_have_4_octets" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_leading_colons_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_leading_whitespace_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_missing_leading_octet_is_invalid" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_missing_leading_octet_with_omitted_octets_later" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_missing_trailing_octet_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_double_colons_between_the_sections" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_ipv4_section_with_a_hex_octet" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_ipv4_section_with_octet_out_of_range" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_leading_double_colons_ipv4_mapped_ipv6_address_" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_mixed_format_with_the_ipv4_section_as_decimal_octets" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_netmask_is_not_a_part_of_ipv6_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_no_colons_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_no_digits_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_single_set_of_double_colons_in_the_middle_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_trailing_4_hex_symbols_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_trailing_5_hex_symbols_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_trailing_colons_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_trailing_whitespace_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_triple_colons_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_two_sets_of_double_colons_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ipv6_validation_of_IPv6_addresses_zone_id_is_not_a_part_of_ipv6_address" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_a_schema_given_for_items_JavaScript_pseudo_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_a_schema_given_for_items_JavaScript_pseudo_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_a_schema_given_for_items_ignores_non_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_a_schema_given_for_items_ignores_non_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_a_schema_given_for_items_valid_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_a_schema_given_for_items_valid_items&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_a_schema_given_for_items_wrong_type_of_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_a_schema_given_for_items_wrong_type_of_items&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_an_array_of_schemas_for_items_JavaScript_pseudo_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_an_array_of_schemas_for_items_JavaScript_pseudo_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_an_array_of_schemas_for_items_array_with_additional_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_an_array_of_schemas_for_items_array_with_additional_items&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_an_array_of_schemas_for_items_correct_types" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_an_array_of_schemas_for_items_correct_types&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_an_array_of_schemas_for_items_empty_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_an_array_of_schemas_for_items_empty_array&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_an_array_of_schemas_for_items_incomplete_array_of_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_an_array_of_schemas_for_items_incomplete_array_of_items&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_an_array_of_schemas_for_items_wrong_types" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_an_array_of_schemas_for_items_wrong_types&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_array_form_items_with_null_instance_elements_allows_null_elements" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_array_form_items_with_null_instance_elements_allows_null_elements&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_items_and_subitems_fewer_items_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_items_and_subitems_fewer_items_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_items_and_subitems_too_many_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_items_and_subitems_too_many_items&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_items_and_subitems_too_many_sub_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_items_and_subitems_too_many_sub_items&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_items_and_subitems_valid_items" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_items_and_subitems_valid_items&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_items_and_subitems_wrong_item" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_items_and_subitems_wrong_item&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_items_and_subitems_wrong_sub_item" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_items_and_subitems_wrong_sub_item&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_items_with_null_instance_elements_allows_null_elements" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_items_with_null_instance_elements_allows_null_elements&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_nested_items_nested_array_with_invalid_type" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_nested_items_nested_array_with_invalid_type&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_nested_items_not_deep_enough" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_nested_items_not_deep_enough&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_items_nested_items_valid_nested_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_items_nested_items_valid_nested_array&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxItems_maxItems_validation_exact_length_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxItems_maxItems_validation_exact_length_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxItems_maxItems_validation_ignores_non_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxItems_maxItems_validation_ignores_non_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxItems_maxItems_validation_shorter_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxItems_maxItems_validation_shorter_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxItems_maxItems_validation_too_long_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxItems_maxItems_validation_too_long_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxLength_maxLength_validation_exact_length_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxLength_maxLength_validation_exact_length_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxLength_maxLength_validation_ignores_non_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxLength_maxLength_validation_ignores_non_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxLength_maxLength_validation_shorter_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxLength_maxLength_validation_shorter_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxLength_maxLength_validation_too_long_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxLength_maxLength_validation_too_long_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxLength_maxLength_validation_two_graphemes_is_long_enough" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxLength_maxLength_validation_two_graphemes_is_long_enough&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxProperties_maxProperties_0_means_the_object_is_empty_no_properties_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxProperties_maxProperties_0_means_the_object_is_empty_no_properties_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxProperties_maxProperties_0_means_the_object_is_empty_one_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxProperties_maxProperties_0_means_the_object_is_empty_one_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxProperties_maxProperties_validation_exact_length_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxProperties_maxProperties_validation_exact_length_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxProperties_maxProperties_validation_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxProperties_maxProperties_validation_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxProperties_maxProperties_validation_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxProperties_maxProperties_validation_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxProperties_maxProperties_validation_ignores_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxProperties_maxProperties_validation_ignores_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxProperties_maxProperties_validation_shorter_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxProperties_maxProperties_validation_shorter_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maxProperties_maxProperties_validation_too_long_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_maxProperties_maxProperties_validation_too_long_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_exclusiveMaximum_validation_below_the_maximum_is_still_valid" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_exclusiveMaximum_validation_boundary_point_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_above_the_maximum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_below_the_maximum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_explicit_false_exclusivity__above_the_maximum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_explicit_false_exclusivity__below_the_maximum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_explicit_false_exclusivity__boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_explicit_false_exclusivity__ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_with_unsigned_integer_above_the_maximum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_with_unsigned_integer_below_the_maximum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_with_unsigned_integer_boundary_point_float_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_maximum_maximum_validation_with_unsigned_integer_boundary_point_integer_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minItems_minItems_validation_exact_length_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minItems_minItems_validation_exact_length_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minItems_minItems_validation_ignores_non_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minItems_minItems_validation_ignores_non_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minItems_minItems_validation_longer_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minItems_minItems_validation_longer_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minItems_minItems_validation_too_short_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minItems_minItems_validation_too_short_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minLength_minLength_validation_exact_length_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minLength_minLength_validation_exact_length_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minLength_minLength_validation_ignores_non_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minLength_minLength_validation_ignores_non_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minLength_minLength_validation_longer_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minLength_minLength_validation_longer_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minLength_minLength_validation_one_grapheme_is_not_long_enough" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minLength_minLength_validation_one_grapheme_is_not_long_enough&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minLength_minLength_validation_too_short_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minLength_minLength_validation_too_short_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minProperties_minProperties_validation_exact_length_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minProperties_minProperties_validation_exact_length_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minProperties_minProperties_validation_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minProperties_minProperties_validation_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minProperties_minProperties_validation_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minProperties_minProperties_validation_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minProperties_minProperties_validation_ignores_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minProperties_minProperties_validation_ignores_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minProperties_minProperties_validation_longer_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minProperties_minProperties_validation_longer_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/positiveIntegerDefault0'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minProperties_minProperties_validation_too_short_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_minProperties_minProperties_validation_too_short_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_exclusiveMinimum_validation_above_the_minimum_is_still_valid" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_exclusiveMinimum_validation_boundary_point_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_above_the_minimum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_below_the_minimum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_explicit_false_exclusivity__above_the_minimum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_explicit_false_exclusivity__below_the_minimum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_explicit_false_exclusivity__boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_explicit_false_exclusivity__ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_with_signed_integer_boundary_point_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_with_signed_integer_boundary_point_with_float_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_with_signed_integer_float_below_the_minimum_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_with_signed_integer_ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_with_signed_integer_int_below_the_minimum_is_invalid" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_with_signed_integer_negative_above_the_minimum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_minimum_minimum_validation_with_signed_integer_positive_above_the_minimum_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_by_int_ignores_non_numbers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_by_int_int_by_int" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_by_int_int_by_int_fail" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_by_number_35_is_not_multiple_of_1_5" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_by_number_4_5_is_multiple_of_1_5" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_by_number_zero_is_multiple_of_anything" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_by_small_number_0_00751_is_not_multiple_of_0_0001" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_by_small_number_0_0075_is_multiple_of_0_0001" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_float_division_inf_invalid_but_naive_implementations_may_raise_an_overflow_error" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_multipleOf_float_division_inf_invalid_but_naive_implementations_may_raise_an_overflow_error&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_multipleOf_small_multiple_of_large_integer_any_integer_is_a_multiple_of_1e_8" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_multipleOf_small_multiple_of_large_integer_any_integer_is_a_multiple_of_1e_8&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_doesn_t_match_one" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_doesn_t_match_one&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_doesn_t_match_two" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_doesn_t_match_two&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_empty" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_empty&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_single" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_single&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_two" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_patternProperties_matches_two&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_doesn_t_match_one" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_doesn_t_match_one_ASCII" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_doesn_t_match_two" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_doesn_t_match_two_ASCII" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_matches_empty" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_matches_single" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_non_bmp_regex_Proper_UTF_16_surrogate_pair_handling_pattern_matches_two" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_double_negation_any_value_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_double_negation_any_value_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_array_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_array_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_boolean_false_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_boolean_false_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_boolean_true_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_boolean_true_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_empty_array_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_empty_array_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_empty_object_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_empty_object_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_null_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_null_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_number_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_number_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_object_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_object_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbid_everything_with_empty_schema_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbid_everything_with_empty_schema_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbidden_property_property_absent" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbidden_property_property_absent&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_forbidden_property_property_present" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_forbidden_property_property_present&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_not_allowed" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_not_allowed&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_not_disallowed" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_not_disallowed&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_not_more_complex_schema_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_not_more_complex_schema_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_not_more_complex_schema_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_not_more_complex_schema_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_not_more_complex_schema_other_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_not_more_complex_schema_other_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_not_multiple_types_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_not_multiple_types_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_not_multiple_types_other_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_not_multiple_types_other_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_not_not_multiple_types_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_not_not_multiple_types_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_nested_oneOf_to_check_validation_semantics_anything_non_null_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_nested_oneOf_to_check_validation_semantics_anything_non_null_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_nested_oneOf_to_check_validation_semantics_null_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_nested_oneOf_to_check_validation_semantics_null_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_both_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_both_oneOf_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_complex_types_both_oneOf_valid_complex_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_complex_types_both_oneOf_valid_complex_&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_complex_types_first_oneOf_valid_complex_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_complex_types_first_oneOf_valid_complex_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_complex_types_neither_oneOf_valid_complex_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_complex_types_neither_oneOf_valid_complex_&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_complex_types_second_oneOf_valid_complex_" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_complex_types_second_oneOf_valid_complex_&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_first_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_first_oneOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_neither_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_neither_oneOf_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_second_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_second_oneOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_base_schema_both_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_base_schema_both_oneOf_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_base_schema_mismatch_base_schema" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_base_schema_mismatch_base_schema&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_base_schema_one_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_base_schema_one_oneOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_empty_schema_both_valid_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_empty_schema_both_valid_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_empty_schema_one_valid_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_empty_schema_one_valid_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_missing_optional_property_both_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_missing_optional_property_both_oneOf_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_missing_optional_property_first_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_missing_optional_property_first_oneOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_missing_optional_property_neither_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_missing_optional_property_neither_oneOf_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_missing_optional_property_second_oneOf_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_missing_optional_property_second_oneOf_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/schemaArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_required_both_invalid_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_required_both_invalid_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_required_both_valid_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_required_both_valid_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_required_first_valid_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_required_first_valid_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_oneOf_oneOf_with_required_second_valid_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_oneOf_oneOf_with_required_second_valid_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_a_simultaneous_match_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_a_simultaneous_match_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_a_single_valid_match_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_a_single_valid_match_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_both_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_both_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_one_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_one_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_the_other_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_an_invalid_due_to_the_other_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_multiple_simultaneous_patternProperties_are_validated_multiple_matches_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_multiple_simultaneous_patternProperties_are_validated_multiple_matches_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_a_single_invalid_match_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_a_single_invalid_match_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_a_single_valid_match_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_a_single_valid_match_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_ignores_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_multiple_invalid_matches_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_multiple_invalid_matches_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_patternProperties_validates_properties_matching_a_regex_multiple_valid_matches_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_patternProperties_validates_properties_matching_a_regex_multiple_valid_matches_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_patternProperties_with_null_valued_instance_properties_allows_null_values" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_patternProperties_with_null_valued_instance_properties_allows_null_values&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_non_recognized_members_are_ignored" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_non_recognized_members_are_ignored&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_recognized_members_are_accounted_for" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_recognized_members_are_accounted_for&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_regexes_are_case_sensitive" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_regexes_are_case_sensitive&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_regexes_are_case_sensitive_2" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_patternProperties_regexes_are_not_anchored_by_default_and_are_case_sensitive_regexes_are_case_sensitive_2&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_is_not_anchored_matches_a_substring" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_validation_a_matching_pattern_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_validation_a_non_matching_pattern_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_validation_ignores_arrays" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_validation_ignores_booleans" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_validation_ignores_floats" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_validation_ignores_integers" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_validation_ignores_null" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_pattern_pattern_validation_ignores_objects" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_object_properties_validation_both_properties_invalid_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_object_properties_validation_both_properties_invalid_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_object_properties_validation_both_properties_present_and_valid_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_object_properties_validation_both_properties_present_and_valid_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_object_properties_validation_doesn_t_invalidate_other_properties" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_object_properties_validation_doesn_t_invalidate_other_properties&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_object_properties_validation_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_object_properties_validation_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_object_properties_validation_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_object_properties_validation_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_object_properties_validation_one_property_invalid_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_object_properties_validation_one_property_invalid_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_ignores_property" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_ignores_property&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_invalidates_others" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_invalidates_others&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_validates_others" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_additionalProperty_validates_others&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_invalidates_nonproperty" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_invalidates_nonproperty&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_invalidates_property" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_invalidates_property&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_validates_nonproperty" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_patternProperty_validates_nonproperty&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_patternProperties_additionalProperties_interaction_property_invalidates_property" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_property_invalidates_property&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_patternProperties_additionalProperties_interaction_property_validates_property" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_patternProperties_additionalProperties_interaction_property_validates_property&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_whose_names_are_Javascript_object_property_names___proto___not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_whose_names_are_Javascript_object_property_names___proto___not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_whose_names_are_Javascript_object_property_names_all_present_and_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_whose_names_are_Javascript_object_property_names_all_present_and_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_whose_names_are_Javascript_object_property_names_constructor_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_whose_names_are_Javascript_object_property_names_constructor_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_whose_names_are_Javascript_object_property_names_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_whose_names_are_Javascript_object_property_names_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_whose_names_are_Javascript_object_property_names_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_whose_names_are_Javascript_object_property_names_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_whose_names_are_Javascript_object_property_names_none_of_the_properties_mentioned" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_whose_names_are_Javascript_object_property_names_none_of_the_properties_mentioned&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_whose_names_are_Javascript_object_property_names_toString_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_whose_names_are_Javascript_object_property_names_toString_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_with_escaped_characters_object_with_all_numbers_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_with_escaped_characters_object_with_all_numbers_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_with_escaped_characters_object_with_strings_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_with_escaped_characters_object_with_strings_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_properties_properties_with_null_valued_instance_properties_allows_null_values" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_properties_properties_with_null_valued_instance_properties_allows_null_values&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_Location_independent_identifier_in_remote_ref_integer_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_Location_independent_identifier_in_remote_ref_integer_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://localhost:1234/draft4/locationIndependentIdentifier.json#/definitions/refToInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_Location_independent_identifier_in_remote_ref_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_Location_independent_identifier_in_remote_ref_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_base_URI_change_base_URI_change_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_base_URI_change_base_URI_change_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_base_URI_change_base_URI_change_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_base_URI_change_base_URI_change_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_base_URI_change_change_folder_in_subschema_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_base_URI_change_change_folder_in_subschema_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_base_URI_change_change_folder_in_subschema_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_base_URI_change_change_folder_in_subschema_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_base_URI_change_change_folder_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_base_URI_change_change_folder_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_base_URI_change_change_folder_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_base_URI_change_change_folder_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_fragment_within_remote_ref_remote_fragment_invalid" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_fragment_within_remote_ref_remote_fragment_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_fragment_within_remote_ref_remote_fragment_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_fragment_within_remote_ref_remote_fragment_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://localhost:1234/draft4/subSchemas.json#/definitions/integer'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_ref_within_remote_ref_ref_within_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_ref_within_remote_ref_ref_within_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_ref_within_remote_ref_ref_within_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_ref_within_remote_ref_ref_within_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://localhost:1234/draft4/subSchemas.json#/definitions/refToInteger'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_remote_ref_remote_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_remote_ref_remote_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_remote_ref_remote_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_remote_ref_remote_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://localhost:1234/integer.json'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_root_ref_in_remote_ref_null_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_root_ref_in_remote_ref_null_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_root_ref_in_remote_ref_object_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_root_ref_in_remote_ref_object_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_refRemote_root_ref_in_remote_ref_string_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_refRemote_root_ref_in_remote_ref_string_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_Location_independent_identifier_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_Location_independent_identifier_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_Location_independent_identifier_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_Location_independent_identifier_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_Location_independent_identifier_with_base_URI_change_in_subschema_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_Location_independent_identifier_with_base_URI_change_in_subschema_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_Location_independent_identifier_with_base_URI_change_in_subschema_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_Location_independent_identifier_with_base_URI_change_in_subschema_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_Recursive_references_between_schemas_invalid_tree" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_Recursive_references_between_schemas_invalid_tree&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_Recursive_references_between_schemas_valid_tree" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_Recursive_references_between_schemas_valid_tree&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref__ref_prevents_a_sibling_id_from_changing_the_base_uri__ref_resolves_to_definitions_base_foo_data_does_not_validate" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref__ref_prevents_a_sibling_id_from_changing_the_base_uri__ref_resolves_to_definitions_base_foo_data_does_not_validate&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref__ref_prevents_a_sibling_id_from_changing_the_base_uri__ref_resolves_to_definitions_base_foo_data_validates" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref__ref_prevents_a_sibling_id_from_changing_the_base_uri__ref_resolves_to_definitions_base_foo_data_validates&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_empty_tokens_in_ref_json_pointer_non_number_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_empty_tokens_in_ref_json_pointer_non_number_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_empty_tokens_in_ref_json_pointer_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_empty_tokens_in_ref_json_pointer_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_escaped_pointer_ref_percent_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_escaped_pointer_ref_percent_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_escaped_pointer_ref_percent_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_escaped_pointer_ref_percent_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_escaped_pointer_ref_slash_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_escaped_pointer_ref_slash_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_escaped_pointer_ref_slash_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_escaped_pointer_ref_slash_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_escaped_pointer_ref_tilde_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_escaped_pointer_ref_tilde_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_escaped_pointer_ref_tilde_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_escaped_pointer_ref_tilde_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_id_must_be_resolved_against_nearest_parent_not_just_immediate_parent_non_number_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_id_must_be_resolved_against_nearest_parent_not_just_immediate_parent_non_number_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_id_must_be_resolved_against_nearest_parent_not_just_immediate_parent_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_id_must_be_resolved_against_nearest_parent_not_just_immediate_parent_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_id_with_file_URI_still_resolves_pointers_nix_non_number_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_id_with_file_URI_still_resolves_pointers_nix_non_number_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_id_with_file_URI_still_resolves_pointers_nix_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_id_with_file_URI_still_resolves_pointers_nix_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_id_with_file_URI_still_resolves_pointers_windows_non_number_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_id_with_file_URI_still_resolves_pointers_windows_non_number_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_id_with_file_URI_still_resolves_pointers_windows_number_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_id_with_file_URI_still_resolves_pointers_windows_number_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_naive_replacement_of_ref_with_its_destination_is_not_correct_do_not_evaluate_the_ref_inside_the_enum_matching_any_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_naive_replacement_of_ref_with_its_destination_is_not_correct_do_not_evaluate_the_ref_inside_the_enum_matching_any_string&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_naive_replacement_of_ref_with_its_destination_is_not_correct_match_the_enum_exactly" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_naive_replacement_of_ref_with_its_destination_is_not_correct_match_the_enum_exactly&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_nested_refs_nested_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_nested_refs_nested_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_nested_refs_nested_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_nested_refs_nested_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_property_named_ref_containing_an_actual_ref_property_named_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_property_named_ref_containing_an_actual_ref_property_named_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_property_named_ref_containing_an_actual_ref_property_named_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_property_named_ref_containing_an_actual_ref_property_named_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_property_named_ref_that_is_not_a_reference_property_named_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_property_named_ref_that_is_not_a_reference_property_named_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_property_named_ref_that_is_not_a_reference_property_named_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_property_named_ref_that_is_not_a_reference_property_named_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_ref_overrides_any_sibling_keywords_ref_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_ref_overrides_any_sibling_keywords_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_ref_overrides_any_sibling_keywords_ref_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_ref_overrides_any_sibling_keywords_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_ref_overrides_any_sibling_keywords_ref_valid_maxItems_ignored" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_ref_overrides_any_sibling_keywords_ref_valid_maxItems_ignored&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_refs_with_quote_object_with_numbers_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_refs_with_quote_object_with_numbers_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_refs_with_quote_object_with_strings_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_refs_with_quote_object_with_strings_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_relative_pointer_ref_to_array_match_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_relative_pointer_ref_to_array_match_array&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_relative_pointer_ref_to_array_mismatch_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_relative_pointer_ref_to_array_mismatch_array&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_relative_pointer_ref_to_object_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_relative_pointer_ref_to_object_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_relative_pointer_ref_to_object_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_relative_pointer_ref_to_object_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_remote_ref_containing_refs_itself_remote_ref_invalid" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_remote_ref_containing_refs_itself_remote_ref_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_remote_ref_containing_refs_itself_remote_ref_valid" time="0.001"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_remote_ref_containing_refs_itself_remote_ref_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:258: in validate
    validator = Validator(
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': 'http://json-schema.org/draft-04/schema#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_root_pointer_ref_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_root_pointer_ref_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_root_pointer_ref_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_root_pointer_ref_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_root_pointer_ref_recursive_match" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_root_pointer_ref_recursive_match&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_ref_root_pointer_ref_recursive_mismatch" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_ref_root_pointer_ref_recursive_mismatch&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_default_validation_not_required_by_default" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_default_validation_not_required_by_default&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:44: in additionalProperties
    yield from validator.descend(instance[extra], aP, path=extra)
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_properties_whose_names_are_Javascript_object_property_names___proto___present" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_properties_whose_names_are_Javascript_object_property_names___proto___present&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_properties_whose_names_are_Javascript_object_property_names_all_present" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_properties_whose_names_are_Javascript_object_property_names_all_present&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_properties_whose_names_are_Javascript_object_property_names_constructor_present" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_properties_whose_names_are_Javascript_object_property_names_constructor_present&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_properties_whose_names_are_Javascript_object_property_names_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_properties_whose_names_are_Javascript_object_property_names_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_properties_whose_names_are_Javascript_object_property_names_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_properties_whose_names_are_Javascript_object_property_names_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_properties_whose_names_are_Javascript_object_property_names_none_of_the_properties_mentioned" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_properties_whose_names_are_Javascript_object_property_names_none_of_the_properties_mentioned&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_properties_whose_names_are_Javascript_object_property_names_toString_present" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_properties_whose_names_are_Javascript_object_property_names_toString_present&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_validation_ignores_arrays" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_validation_ignores_arrays&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_validation_ignores_other_non_objects" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_validation_ignores_other_non_objects&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_validation_ignores_strings" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_validation_ignores_strings&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_validation_non_present_required_property_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_validation_non_present_required_property_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_validation_present_required_property_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_validation_present_required_property_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_with_escaped_characters_object_with_all_properties_present_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_with_escaped_characters_object_with_all_properties_present_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/stringArray'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_required_required_with_escaped_characters_object_with_some_properties_missing_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_required_required_with_escaped_characters_object_with_some_properties_missing_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_array_type_matches_arrays_a_boolean_is_not_an_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_array_type_matches_arrays_a_boolean_is_not_an_array&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_array_type_matches_arrays_a_float_is_not_an_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_array_type_matches_arrays_a_float_is_not_an_array&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_array_type_matches_arrays_a_string_is_not_an_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_array_type_matches_arrays_a_string_is_not_an_array&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_array_type_matches_arrays_an_array_is_an_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_array_type_matches_arrays_an_array_is_an_array&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_array_type_matches_arrays_an_integer_is_not_an_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_array_type_matches_arrays_an_integer_is_not_an_array&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_array_type_matches_arrays_an_object_is_not_an_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_array_type_matches_arrays_an_object_is_not_an_array&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_array_type_matches_arrays_null_is_not_an_array" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_array_type_matches_arrays_null_is_not_an_array&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_a_float_is_not_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_a_float_is_not_a_boolean&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_a_string_is_not_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_a_string_is_not_a_boolean&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_an_array_is_not_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_an_array_is_not_a_boolean&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_an_empty_string_is_not_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_an_empty_string_is_not_a_boolean&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_an_integer_is_not_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_an_integer_is_not_a_boolean&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_an_object_is_not_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_an_object_is_not_a_boolean&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_false_is_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_false_is_a_boolean&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_null_is_not_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_null_is_not_a_boolean&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_true_is_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_true_is_a_boolean&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_boolean_type_matches_booleans_zero_is_not_a_boolean" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_boolean_type_matches_booleans_zero_is_not_a_boolean&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_integer_type_matches_integers_a_boolean_is_not_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_integer_type_matches_integers_a_boolean_is_not_an_integer&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_integer_type_matches_integers_a_float_is_not_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_integer_type_matches_integers_a_float_is_not_an_integer&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_integer_type_matches_integers_a_string_is_not_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_integer_type_matches_integers_a_string_is_not_an_integer&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_integer_type_matches_integers_a_string_is_still_not_an_integer_even_if_it_looks_like_one" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_integer_type_matches_integers_a_string_is_still_not_an_integer_even_if_it_looks_like_one&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_integer_type_matches_integers_an_array_is_not_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_integer_type_matches_integers_an_array_is_not_an_integer&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_integer_type_matches_integers_an_integer_is_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_integer_type_matches_integers_an_integer_is_an_integer&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_integer_type_matches_integers_an_object_is_not_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_integer_type_matches_integers_an_object_is_not_an_integer&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_integer_type_matches_integers_null_is_not_an_integer" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_integer_type_matches_integers_null_is_not_an_integer&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_multiple_types_can_be_specified_in_an_array_a_boolean_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_multiple_types_can_be_specified_in_an_array_a_boolean_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_multiple_types_can_be_specified_in_an_array_a_float_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_multiple_types_can_be_specified_in_an_array_a_float_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_multiple_types_can_be_specified_in_an_array_a_string_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_multiple_types_can_be_specified_in_an_array_a_string_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_multiple_types_can_be_specified_in_an_array_an_array_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_multiple_types_can_be_specified_in_an_array_an_array_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_multiple_types_can_be_specified_in_an_array_an_integer_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_multiple_types_can_be_specified_in_an_array_an_integer_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_multiple_types_can_be_specified_in_an_array_an_object_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_multiple_types_can_be_specified_in_an_array_an_object_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_multiple_types_can_be_specified_in_an_array_null_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_multiple_types_can_be_specified_in_an_array_null_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_a_float_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_a_float_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_a_string_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_a_string_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_an_array_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_an_array_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_an_empty_string_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_an_empty_string_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_an_integer_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_an_integer_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_an_object_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_an_object_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_false_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_false_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_null_is_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_null_is_null&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_true_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_true_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_null_type_matches_only_the_null_object_zero_is_not_null" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_null_type_matches_only_the_null_object_zero_is_not_null&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_a_boolean_is_not_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_a_boolean_is_not_a_number&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_a_float_is_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_a_float_is_a_number&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_a_float_with_zero_fractional_part_is_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_a_float_with_zero_fractional_part_is_a_number&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_a_string_is_not_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_a_string_is_not_a_number&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_a_string_is_still_not_a_number_even_if_it_looks_like_one" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_a_string_is_still_not_a_number_even_if_it_looks_like_one&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_an_array_is_not_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_an_array_is_not_a_number&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_an_integer_is_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_an_integer_is_a_number&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_an_object_is_not_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_an_object_is_not_a_number&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_number_type_matches_numbers_null_is_not_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_number_type_matches_numbers_null_is_not_a_number&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_object_type_matches_objects_a_boolean_is_not_an_object" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_object_type_matches_objects_a_boolean_is_not_an_object&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_object_type_matches_objects_a_float_is_not_an_object" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_object_type_matches_objects_a_float_is_not_an_object&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_object_type_matches_objects_a_string_is_not_an_object" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_object_type_matches_objects_a_string_is_not_an_object&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_object_type_matches_objects_an_array_is_not_an_object" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_object_type_matches_objects_an_array_is_not_an_object&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_object_type_matches_objects_an_integer_is_not_an_object" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_object_type_matches_objects_an_integer_is_not_an_object&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_object_type_matches_objects_an_object_is_an_object" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_object_type_matches_objects_an_object_is_an_object&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_object_type_matches_objects_null_is_not_an_object" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_object_type_matches_objects_null_is_not_an_object&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_1_is_not_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_1_is_not_a_string&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_a_boolean_is_not_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_a_boolean_is_not_a_string&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_a_float_is_not_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_a_float_is_not_a_string&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_a_string_is_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_a_string_is_a_string&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_a_string_is_still_a_string_even_if_it_looks_like_a_number" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_a_string_is_still_a_string_even_if_it_looks_like_a_number&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_an_array_is_not_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_an_array_is_not_a_string&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_an_empty_string_is_still_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_an_empty_string_is_still_a_string&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_an_object_is_not_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_an_object_is_not_a_string&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_string_type_matches_strings_null_is_not_a_string" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_string_type_matches_strings_null_is_not_a_string&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_object_or_null_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_object_or_null_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_object_or_null_null_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_object_or_null_null_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_object_or_null_number_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_object_or_null_number_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_object_or_null_object_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_object_or_null_object_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_object_or_null_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_object_or_null_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_or_object_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_or_object_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_or_object_null_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_or_object_null_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_or_object_number_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_or_object_number_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_or_object_object_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_or_object_object_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_array_or_object_string_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_array_or_object_string_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_as_array_with_one_item_number_is_invalid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_as_array_with_one_item_number_is_invalid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_type_type_as_array_with_one_item_string_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_type_type_as_array_with_one_item_string_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#/definitions/simpleTypes'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_0_and_false_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_1_and_true_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_false_is_not_equal_to_zero" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_non_unique_array_of_arrays_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_non_unique_array_of_integers_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_non_unique_array_of_nested_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_non_unique_array_of_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_non_unique_heterogeneous_types_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_numbers_are_unique_if_mathematically_unequal" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_true_is_not_equal_to_one" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_unique_array_of_arrays_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_unique_array_of_integers_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_unique_array_of_nested_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_unique_array_of_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_validation_unique_heterogeneous_types_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items__false_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items__false_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items__false_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items__false_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items__true_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items__true_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items__true_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items__true_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__false_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__false_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__false_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__false_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__true_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__true_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__true_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false__true_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false_extra_items_are_invalid_even_if_unique" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_and_additionalItems_false_extra_items_are_invalid_even_if_unique&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_non_unique_array_extended_from_false_true_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_non_unique_array_extended_from_false_true_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_non_unique_array_extended_from_true_false_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_non_unique_array_extended_from_true_false_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_unique_array_extended_from_false_true_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_unique_array_extended_from_false_true_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_false_with_an_array_of_items_unique_array_extended_from_true_false_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_false_with_an_array_of_items_unique_array_extended_from_true_false_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_0_and_false_are_unique" time="0.001" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_1_and_true_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation__0_and_false_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation__1_and_true_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation__a_false_and_a_0_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation__a_true_and_a_1_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_different_objects_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_false_is_not_equal_to_zero" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_nested_0_and_false_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_nested_1_and_true_are_unique" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_arrays_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_integers_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_more_than_two_arrays_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_more_than_two_integers_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_nested_objects_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_objects_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_non_unique_array_of_strings_is_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_non_unique_heterogeneous_types_are_invalid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_numbers_are_unique_if_mathematically_unequal" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_objects_are_non_unique_despite_key_order" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_property_order_of_array_of_objects_is_ignored" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_true_is_not_equal_to_one" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_unique_array_of_arrays_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_unique_array_of_integers_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_unique_array_of_nested_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_unique_array_of_objects_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_unique_array_of_strings_is_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_validation_unique_heterogeneous_types_are_valid" time="0.000" /><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items__false_false_from_items_array_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items__false_false_from_items_array_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items__false_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items__false_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items__true_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items__true_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items__true_true_from_items_array_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items__true_true_from_items_array_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__false_false_from_items_array_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__false_false_from_items_array_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__false_true_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__false_true_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__true_false_from_items_array_is_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__true_false_from_items_array_is_valid&gt;

    def fn(this):
&gt;       self.validate(**kwargs)

jsonschema/tests/_suite.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

schema = {'$ref': '#'}

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__true_true_from_items_array_is_not_valid" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false__true_true_from_items_array_is_not_valid&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase classname="jsonschema.tests.test_jsonschema_test_suite.TestDraft4" name="test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false_extra_items_are_invalid_even_if_unique" time="0.000"><failure message="NotImplementedError: Error">this = &lt;jsonschema.tests.test_jsonschema_test_suite.TestDraft4 testMethod=test_uniqueItems_uniqueItems_with_an_array_of_items_and_additionalItems_false_extra_items_are_invalid_even_if_unique&gt;

    def fn(this):
        with this.assertRaises(jsonschema.ValidationError):
&gt;           self.validate(**kwargs)

jsonschema/tests/_suite.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jsonschema/tests/_suite.py:257: in validate
    Validator.check_schema(self.schema)
jsonschema/validators.py:316: in check_schema
    for error in validator.iter_errors(schema):
jsonschema/validators.py:384: in iter_errors
    for error in errors:
jsonschema/_keywords.py:296: in properties
    yield from validator.descend(
jsonschema/validators.py:432: in descend
    for error in errors:
jsonschema/_keywords.py:340: in anyOf
    errs = list(validator.descend(instance, subschema, schema_path=index))
jsonschema/validators.py:424: in descend
    evolved = self.evolve(schema=schema, _resolver=resolver)
jsonschema/validators.py:348: in evolve
    return NewValidator(**changes)
&lt;attrs generated methods jsonschema.validators.create.&lt;locals&gt;.Validator&gt;:32: in __init__
    self.__attrs_post_init__()
jsonschema/validators.py:296: in __attrs_post_init__
    for k, v in applicable_validators(self.schema)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def ignore_ref_siblings(schema):
        """
        Ignore siblings of ``$ref`` if it is present.
    
        Otherwise, return all keywords.
    
        Suitable for use with `create`'s ``applicable_validators`` argument.
        """
        ref = schema.get("$ref")
        if ref is not None:
&gt;           return [("$ref", ref)]
E           NotImplementedError: Error

jsonschema/_legacy_keywords.py:19: NotImplementedError</failure></testcase><testcase time="0.000" /></testsuite></testsuites>