
You are an AI coding assistant tasked with implementing missing code based on debug information.

# OVERVIEW
Total Exceptions Found: 2


# EXCEPTION 1 INFORMATION
Type: Unknown
Message: No detailed message

## FAILING CODE - EXCEPTION 1
```python
  1: """Basic arithmetic operations module."""
  2: 
  3: from typing import Union, List
  4: from decimal import Decimal, getcontext
  5: 
  6: # Set precision for decimal operations
  7: getcontext().prec = 28
  8: 
  9: Number = Union[int, float, Decimal]
  10: 
  11: def add(a: Number, b: Number) -> Decimal:
  12:     raise NotImplementedError('TODO')
  13: 
  14: 
  15: 
  16: def subtract(a: Number, b: Number) -> Decimal:
  17:     raise NotImplementedError('TODO')
  18: 
  19: 
  20: 
  21: def multiply(a: Number, b: Number) -> Decimal:
  22:     raise NotImplementedError('TODO')
  23: 
  24: 
  25: 
  26: def divide(a: Number, b: Number) -> Decimal:
  27:     raise NotImplementedError('TODO')
  28: 
  29: 
  30: 
  31: def power(a: Number, b: Number) -> Decimal:
  32:     raise NotImplementedError('TODO')
  33: 
  34: 
  35: 
  36: def sum_list(numbers: List[Number]) -> Decimal:
  37:     raise NotImplementedError('TODO')
  38: 
  39: 
  40: 
  41: def average(numbers: List[Number]) -> Decimal:
→ 42:     raise NotImplementedError('TODO')
  43: 
  44: 

```

## TRACEBACK - EXCEPTION 1
```
No detailed traceback available
```

## EXECUTION CONTEXT - EXCEPTION 1
```
Entered function average
Executed: raise NotImplementedError('TODO')
```

## VARIABLE VALUES AT EXCEPTION TIME - EXCEPTION 1
```
{
  "numbers": [
    "1",
    "2",
    "3"
  ]
}
```

## CLASS API CONTEXT - EXCEPTION 1
```
{}
```


# EXCEPTION 2 INFORMATION
Type: NotImplementedError
Message: TODO

## FAILING CODE - EXCEPTION 2
```python
# Source code not available
```

## TRACEBACK - EXCEPTION 2
```
Traceback (most recent call last):
  File "/home/tymofii/school/isp/debugger-enhanced-code-completion/main.py", line 155, in debug_test_case
    test_case()
    ~~~~~~~~~^^
  File "<string>", line 58, in test_average
  File "/home/tymofii/school/isp/debugger-enhanced-code-completion/example/calculator/src/calculator/arithmetic.py", line 42, in average
    raise NotImplementedError('TODO')
NotImplementedError: TODO

```

## EXECUTION CONTEXT - EXCEPTION 2
```
Entered function average
Executed: raise NotImplementedError('TODO')
Returned from average with value None
```

## VARIABLE VALUES AT EXCEPTION TIME - EXCEPTION 2
```
{}
```

## CLASS API CONTEXT - EXCEPTION 2
```
{}
```


# ALL RELATED CODE FROM CALL STACKS
## File: /home/tymofii/school/isp/debugger-enhanced-code-completion/example/calculator/src/calculator/arithmetic.py
```python
  1: """Basic arithmetic operations module."""
  2: 
  3: from typing import Union, List
  4: from decimal import Decimal, getcontext
  5: 
  6: # Set precision for decimal operations
  7: getcontext().prec = 28
  8: 
  9: Number = Union[int, float, Decimal]
  10: 
  11: def add(a: Number, b: Number) -> Decimal:
  12:     raise NotImplementedError('TODO')
  13: 
  14: 
  15: 
  16: def subtract(a: Number, b: Number) -> Decimal:
  17:     raise NotImplementedError('TODO')
  18: 
  19: 
  20: 
  21: def multiply(a: Number, b: Number) -> Decimal:
  22:     raise NotImplementedError('TODO')
  23: 
  24: 
  25: 
  26: def divide(a: Number, b: Number) -> Decimal:
  27:     raise NotImplementedError('TODO')
  28: 
  29: 
  30: 
  31: def power(a: Number, b: Number) -> Decimal:
  32:     raise NotImplementedError('TODO')
  33: 
  34: 
  35: 
  36: def sum_list(numbers: List[Number]) -> Decimal:
  37:     raise NotImplementedError('TODO')
  38: 
  39: 
  40: 
  41: def average(numbers: List[Number]) -> Decimal:
→ 42:     raise NotImplementedError('TODO')
  43: 
  44: 

```

Based on the information above, please:
1. Identify all functions that need to be implemented (including those with NotImplementedError)
2. Provide a complete implementation of ALL functions that would pass the tests
3. Make sure to implement ALL functions, not just the ones that had exceptions
4. Explain your reasoning for the implementations

```python
# Your implementation here
```
